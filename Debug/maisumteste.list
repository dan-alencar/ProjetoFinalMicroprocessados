
maisumteste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002730  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002820  08002820  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002820  08002820  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002834  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002834  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fc7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000153a  00000000  00000000  00027ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  00029e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f083  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097b4  00000000  00000000  000396f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005da5f  00000000  00000000  00042ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a0906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff4  00000000  00000000  000a0958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027d8 	.word	0x080027d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080027d8 	.word	0x080027d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbfe 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f8b4 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9dc 	bl	80005e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f95e 	bl	80004f0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000234:	f000 f8ee 	bl	8000414 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);//clock do trigger
 8000238:	4b53      	ldr	r3, [pc, #332]	; (8000388 <main+0x168>)
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fb88 	bl	8001950 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);//pino de subida
 8000240:	4b52      	ldr	r3, [pc, #328]	; (800038c <main+0x16c>)
 8000242:	2104      	movs	r1, #4
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fc19 	bl	8001a7c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);//pino de descida
 800024a:	4b50      	ldr	r3, [pc, #320]	; (800038c <main+0x16c>)
 800024c:	2108      	movs	r1, #8
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fc14 	bl	8001a7c <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uss1_delay=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3) - HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8000254:	4b4d      	ldr	r3, [pc, #308]	; (800038c <main+0x16c>)
 8000256:	2108      	movs	r1, #8
 8000258:	0018      	movs	r0, r3
 800025a:	f001 ff9f 	bl	800219c <HAL_TIM_ReadCapturedValue>
 800025e:	0004      	movs	r4, r0
 8000260:	4b4a      	ldr	r3, [pc, #296]	; (800038c <main+0x16c>)
 8000262:	2104      	movs	r1, #4
 8000264:	0018      	movs	r0, r3
 8000266:	f001 ff99 	bl	800219c <HAL_TIM_ReadCapturedValue>
 800026a:	0003      	movs	r3, r0
 800026c:	1ae3      	subs	r3, r4, r3
 800026e:	001a      	movs	r2, r3
 8000270:	4b47      	ldr	r3, [pc, #284]	; (8000390 <main+0x170>)
 8000272:	601a      	str	r2, [r3, #0]
	  HAL_Delay(90);
 8000274:	205a      	movs	r0, #90	; 0x5a
 8000276:	f000 fc39 	bl	8000aec <HAL_Delay>
	  	  if (uss1_delay>600){
 800027a:	4b45      	ldr	r3, [pc, #276]	; (8000390 <main+0x170>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	2396      	movs	r3, #150	; 0x96
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	429a      	cmp	r2, r3
 8000284:	dd16      	ble.n	80002b4 <main+0x94>
	  		  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8000286:	2390      	movs	r3, #144	; 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2201      	movs	r2, #1
 800028c:	2102      	movs	r1, #2
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fe9e 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  		HAL_Delay(100);
 8000294:	2064      	movs	r0, #100	; 0x64
 8000296:	f000 fc29 	bl	8000aec <HAL_Delay>
	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2200      	movs	r2, #0
 80002a0:	2102      	movs	r1, #2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fe94 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  		HAL_Delay(1000);
 80002a8:	23fa      	movs	r3, #250	; 0xfa
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fc1d 	bl	8000aec <HAL_Delay>
 80002b2:	e7cf      	b.n	8000254 <main+0x34>
	  	  	}
	  	  else if (uss1_delay<=600 && uss1_delay>400){
 80002b4:	4b36      	ldr	r3, [pc, #216]	; (8000390 <main+0x170>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	2396      	movs	r3, #150	; 0x96
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	429a      	cmp	r2, r3
 80002be:	dc1c      	bgt.n	80002fa <main+0xda>
 80002c0:	4b33      	ldr	r3, [pc, #204]	; (8000390 <main+0x170>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	23c8      	movs	r3, #200	; 0xc8
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	429a      	cmp	r2, r3
 80002ca:	dd16      	ble.n	80002fa <main+0xda>
	  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2201      	movs	r2, #1
 80002d2:	2102      	movs	r1, #2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fe7b 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  	  		HAL_Delay(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 fc06 	bl	8000aec <HAL_Delay>
	  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80002e0:	2390      	movs	r3, #144	; 0x90
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2200      	movs	r2, #0
 80002e6:	2102      	movs	r1, #2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fe71 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  	  		HAL_Delay(500);
 80002ee:	23fa      	movs	r3, #250	; 0xfa
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fbfa 	bl	8000aec <HAL_Delay>
 80002f8:	e044      	b.n	8000384 <main+0x164>
	  	  	  	}
	  	  else if (uss1_delay<=400 && uss1_delay>200){
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <main+0x170>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	23c8      	movs	r3, #200	; 0xc8
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	429a      	cmp	r2, r3
 8000304:	dc18      	bgt.n	8000338 <main+0x118>
 8000306:	4b22      	ldr	r3, [pc, #136]	; (8000390 <main+0x170>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2bc8      	cmp	r3, #200	; 0xc8
 800030c:	dd14      	ble.n	8000338 <main+0x118>
	  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800030e:	2390      	movs	r3, #144	; 0x90
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	2201      	movs	r2, #1
 8000314:	2102      	movs	r1, #2
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fe5a 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  	  		HAL_Delay(100);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f000 fbe5 	bl	8000aec <HAL_Delay>
	  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000322:	2390      	movs	r3, #144	; 0x90
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2200      	movs	r2, #0
 8000328:	2102      	movs	r1, #2
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fe50 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  	  		HAL_Delay(200);
 8000330:	20c8      	movs	r0, #200	; 0xc8
 8000332:	f000 fbdb 	bl	8000aec <HAL_Delay>
 8000336:	e025      	b.n	8000384 <main+0x164>
	  	  	  	}
	  	  else if (uss1_delay<=200 && uss1_delay>100){
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <main+0x170>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2bc8      	cmp	r3, #200	; 0xc8
 800033e:	dc15      	bgt.n	800036c <main+0x14c>
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <main+0x170>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b64      	cmp	r3, #100	; 0x64
 8000346:	dd11      	ble.n	800036c <main+0x14c>
	  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8000348:	2390      	movs	r3, #144	; 0x90
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fe3d 	bl	8000fd0 <HAL_GPIO_WritePin>
	  	  	  		HAL_Delay(100);
 8000356:	2064      	movs	r0, #100	; 0x64
 8000358:	f000 fbc8 	bl	8000aec <HAL_Delay>
	  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800035c:	2390      	movs	r3, #144	; 0x90
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	2200      	movs	r2, #0
 8000362:	2102      	movs	r1, #2
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fe33 	bl	8000fd0 <HAL_GPIO_WritePin>
 800036a:	e00b      	b.n	8000384 <main+0x164>
	  	  }
	  	  else if (uss1_delay<=100){
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <main+0x170>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b64      	cmp	r3, #100	; 0x64
 8000372:	dd00      	ble.n	8000376 <main+0x156>
 8000374:	e76e      	b.n	8000254 <main+0x34>
	  		  	  	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8000376:	2390      	movs	r3, #144	; 0x90
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	2201      	movs	r2, #1
 800037c:	2102      	movs	r1, #2
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fe26 	bl	8000fd0 <HAL_GPIO_WritePin>
	  uss1_delay=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3) - HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8000384:	e766      	b.n	8000254 <main+0x34>
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	20000070 	.word	0x20000070
 800038c:	20000028 	.word	0x20000028
 8000390:	200000b8 	.word	0x200000b8

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b091      	sub	sp, #68	; 0x44
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	2410      	movs	r4, #16
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2330      	movs	r3, #48	; 0x30
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f002 fa0f 	bl	80027c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	2310      	movs	r3, #16
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f002 fa08 	bl	80027c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b8:	0021      	movs	r1, r4
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2202      	movs	r2, #2
 80003be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2201      	movs	r2, #1
 80003c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2210      	movs	r2, #16
 80003ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fe19 	bl	800100c <HAL_RCC_OscConfig>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003de:	f000 f9c3 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	003b      	movs	r3, r7
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fa:	003b      	movs	r3, r7
 80003fc:	2100      	movs	r1, #0
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f922 	bl	8001648 <HAL_RCC_ClockConfig>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000408:	f000 f9ae 	bl	8000768 <Error_Handler>
  }
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b011      	add	sp, #68	; 0x44
 8000412:	bd90      	pop	{r4, r7, pc}

08000414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041a:	2310      	movs	r3, #16
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	0018      	movs	r0, r3
 8000420:	2308      	movs	r3, #8
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 f9cf 	bl	80027c8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	2310      	movs	r3, #16
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f002 f9c8 	bl	80027c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <MX_TIM1_Init+0xd0>)
 800043a:	4a2b      	ldr	r2, [pc, #172]	; (80004e8 <MX_TIM1_Init+0xd4>)
 800043c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800043e:	4b29      	ldr	r3, [pc, #164]	; (80004e4 <MX_TIM1_Init+0xd0>)
 8000440:	221f      	movs	r2, #31
 8000442:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <MX_TIM1_Init+0xd0>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800044a:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <MX_TIM1_Init+0xd0>)
 800044c:	4a27      	ldr	r2, [pc, #156]	; (80004ec <MX_TIM1_Init+0xd8>)
 800044e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_TIM1_Init+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000456:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <MX_TIM1_Init+0xd0>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_TIM1_Init+0xd0>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000462:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <MX_TIM1_Init+0xd0>)
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fab9 	bl	80019dc <HAL_TIM_IC_Init>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800046e:	f000 f97b 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000472:	2110      	movs	r1, #16
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000480:	187a      	adds	r2, r7, r1
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_TIM1_Init+0xd0>)
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f002 f918 	bl	80026bc <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000490:	f000 f96a 	bl	8000768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000494:	003b      	movs	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800049a:	003b      	movs	r3, r7
 800049c:	2201      	movs	r2, #1
 800049e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80004ac:	0039      	movs	r1, r7
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_TIM1_Init+0xd0>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fcfa 	bl	8001eac <HAL_TIM_IC_ConfigChannel>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004bc:	f000 f954 	bl	8000768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2202      	movs	r2, #2
 80004c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80004c6:	0039      	movs	r1, r7
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_TIM1_Init+0xd0>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fced 	bl	8001eac <HAL_TIM_IC_ConfigChannel>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80004d6:	f000 f947 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b006      	add	sp, #24
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40012c00 	.word	0x40012c00
 80004ec:	0000ea60 	.word	0x0000ea60

080004f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	2318      	movs	r3, #24
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2310      	movs	r3, #16
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f002 f961 	bl	80027c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000506:	2310      	movs	r3, #16
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2308      	movs	r3, #8
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f002 f959 	bl	80027c8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2310      	movs	r3, #16
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f002 f952 	bl	80027c8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <MX_TIM3_Init+0xf0>)
 8000526:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <MX_TIM3_Init+0xf4>)
 8000528:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MX_TIM3_Init+0xf0>)
 800052c:	22c8      	movs	r2, #200	; 0xc8
 800052e:	0092      	lsls	r2, r2, #2
 8000530:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000532:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <MX_TIM3_Init+0xf0>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_TIM3_Init+0xf0>)
 800053a:	22fa      	movs	r2, #250	; 0xfa
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <MX_TIM3_Init+0xf0>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <MX_TIM3_Init+0xf0>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <MX_TIM3_Init+0xf0>)
 800054e:	0018      	movs	r0, r3
 8000550:	f001 f9ae 	bl	80018b0 <HAL_TIM_Base_Init>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000558:	f000 f906 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	2118      	movs	r1, #24
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	0152      	lsls	r2, r2, #5
 8000564:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000566:	187a      	adds	r2, r7, r1
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_TIM3_Init+0xf0>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fd41 	bl	8001ff4 <HAL_TIM_ConfigClockSource>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000576:	f000 f8f7 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <MX_TIM3_Init+0xf0>)
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fa2d 	bl	80019dc <HAL_TIM_IC_Init>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000586:	f000 f8ef 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058a:	2110      	movs	r1, #16
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000598:	187a      	adds	r2, r7, r1
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_TIM3_Init+0xf0>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f002 f88c 	bl	80026bc <HAL_TIMEx_MasterConfigSynchronization>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80005a8:	f000 f8de 	bl	8000768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005c4:	0039      	movs	r1, r7
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_TIM3_Init+0xf0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fc6e 	bl	8001eac <HAL_TIM_IC_ConfigChannel>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 80005d4:	f000 f8c8 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b00a      	add	sp, #40	; 0x28
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000070 	.word	0x20000070
 80005e4:	40000400 	.word	0x40000400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	240c      	movs	r4, #12
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 f8e5 	bl	80027c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	03c9      	lsls	r1, r1, #15
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_GPIO_Init+0x8c>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	03db      	lsls	r3, r3, #15
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_GPIO_Init+0x8c>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_GPIO_Init+0x8c>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	2200      	movs	r2, #0
 800063c:	2103      	movs	r1, #3
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fcc6 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000644:	0021      	movs	r1, r4
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2203      	movs	r2, #3
 800064a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2201      	movs	r2, #1
 8000650:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	187a      	adds	r2, r7, r1
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fb42 	bl	8000cf0 <HAL_GPIO_Init>

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b009      	add	sp, #36	; 0x24
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4
 * */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
		//descida echo uss1
		if(htim->Channel==TIM_CHANNEL_3){

		}
	}
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}

08000688 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM3) //
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d114      	bne.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
    	//Calcula a largura do pulso de echo do sensor
    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET); //USS1 trigger
 800069a:	2390      	movs	r3, #144	; 0x90
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2201      	movs	r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fc94 	bl	8000fd0 <HAL_GPIO_WritePin>
    	Delay_Us(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 f847 	bl	800073c <Delay_Us>
    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET); //USS1 trigger
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fc8a 	bl	8000fd0 <HAL_GPIO_WritePin>
    	__HAL_TIM_SET_COUNTER(&htim1,0);
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
    	//__HAL_TIM_SET_COUNTER(&htim1,0);
    }

}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40000400 	.word	0x40000400
 80006d0:	20000028 	.word	0x20000028

080006d4 <getUs>:
uint32_t getUs(void) {
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 80006da:	f001 f883 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80006de:	0003      	movs	r3, r0
 80006e0:	4914      	ldr	r1, [pc, #80]	; (8000734 <getUs+0x60>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff fd10 	bl	8000108 <__udivsi3>
 80006e8:	0003      	movs	r3, r0
 80006ea:	607b      	str	r3, [r7, #4]
	register uint32_t ms, cycle_cnt;
	do {
		ms = HAL_GetTick();
 80006ec:	f000 f9f4 	bl	8000ad8 <HAL_GetTick>
 80006f0:	0004      	movs	r4, r0
		cycle_cnt = SysTick->VAL;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <getUs+0x64>)
 80006f4:	689d      	ldr	r5, [r3, #8]
	} while (ms != HAL_GetTick());
 80006f6:	f000 f9ef 	bl	8000ad8 <HAL_GetTick>
 80006fa:	0003      	movs	r3, r0
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d1f5      	bne.n	80006ec <getUs+0x18>

	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8000700:	0023      	movs	r3, r4
 8000702:	015b      	lsls	r3, r3, #5
 8000704:	1b1b      	subs	r3, r3, r4
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	191b      	adds	r3, r3, r4
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	001c      	movs	r4, r3
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	0013      	movs	r3, r2
 8000712:	015b      	lsls	r3, r3, #5
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	189b      	adds	r3, r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	1b5b      	subs	r3, r3, r5
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff fcf1 	bl	8000108 <__udivsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	18e3      	adds	r3, r4, r3
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bdb0      	pop	{r4, r5, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	000f4240 	.word	0x000f4240
 8000738:	e000e010 	.word	0xe000e010

0800073c <Delay_Us>:

void Delay_Us(uint32_t micros) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint32_t start = getUs();
 8000744:	f7ff ffc6 	bl	80006d4 <getUs>
 8000748:	0003      	movs	r3, r0
 800074a:	60fb      	str	r3, [r7, #12]
	while (getUs()-start < (uint32_t) micros);
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	f7ff ffc1 	bl	80006d4 <getUs>
 8000752:	0002      	movs	r2, r0
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d8f7      	bhi.n	800074e <Delay_Us+0x12>
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b004      	add	sp, #16
 8000766:	bd80      	pop	{r7, pc}

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	619a      	str	r2, [r3, #24]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0549      	lsls	r1, r1, #21
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_MspInit+0x44>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	055b      	lsls	r3, r3, #21
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b08b      	sub	sp, #44	; 0x2c
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	2414      	movs	r4, #20
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f001 fffa 	bl	80027c8 <memset>
  if(htim_ic->Instance==TIM1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <HAL_TIM_IC_MspInit+0xb4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d143      	bne.n	8000866 <HAL_TIM_IC_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_TIM_IC_MspInit+0xb8>)
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_TIM_IC_MspInit+0xb8>)
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	0109      	lsls	r1, r1, #4
 80007e8:	430a      	orrs	r2, r1
 80007ea:	619a      	str	r2, [r3, #24]
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_TIM_IC_MspInit+0xb8>)
 80007ee:	699a      	ldr	r2, [r3, #24]
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_TIM_IC_MspInit+0xb8>)
 80007fc:	695a      	ldr	r2, [r3, #20]
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <HAL_TIM_IC_MspInit+0xb8>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0289      	lsls	r1, r1, #10
 8000804:	430a      	orrs	r2, r1
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_TIM_IC_MspInit+0xb8>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	029b      	lsls	r3, r3, #10
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	22c0      	movs	r2, #192	; 0xc0
 800081a:	00d2      	lsls	r2, r2, #3
 800081c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2202      	movs	r2, #2
 8000824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2202      	movs	r2, #2
 8000836:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	187a      	adds	r2, r7, r1
 800083a:	2390      	movs	r3, #144	; 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fa55 	bl	8000cf0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200d      	movs	r0, #13
 800084c:	f000 fa1e 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000850:	200d      	movs	r0, #13
 8000852:	f000 fa30 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200e      	movs	r0, #14
 800085c:	f000 fa16 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000860:	200e      	movs	r0, #14
 8000862:	f000 fa28 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b00b      	add	sp, #44	; 0x2c
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40012c00 	.word	0x40012c00
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	2414      	movs	r4, #20
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f001 ff9c 	bl	80027c8 <memset>
  if(htim_base->Instance==TIM3)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1f      	ldr	r2, [pc, #124]	; (8000914 <HAL_TIM_Base_MspInit+0x9c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d138      	bne.n	800090c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <HAL_TIM_Base_MspInit+0xa0>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <HAL_TIM_Base_MspInit+0xa0>)
 80008a0:	2102      	movs	r1, #2
 80008a2:	430a      	orrs	r2, r1
 80008a4:	61da      	str	r2, [r3, #28]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_TIM_Base_MspInit+0xa0>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	2202      	movs	r2, #2
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_TIM_Base_MspInit+0xa0>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_TIM_Base_MspInit+0xa0>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0289      	lsls	r1, r1, #10
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_TIM_Base_MspInit+0xa0>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	029b      	lsls	r3, r3, #10
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2240      	movs	r2, #64	; 0x40
 80008d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2202      	movs	r2, #2
 80008da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	187a      	adds	r2, r7, r1
 80008f0:	2390      	movs	r3, #144	; 0x90
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f9fa 	bl	8000cf0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2010      	movs	r0, #16
 8000902:	f000 f9c3 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000906:	2010      	movs	r0, #16
 8000908:	f000 f9d5 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00b      	add	sp, #44	; 0x2c
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40000400 	.word	0x40000400
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f8b8 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000952:	0018      	movs	r0, r3
 8000954:	f001 f994 	bl	8001c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000028 	.word	0x20000028

08000964 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <TIM1_CC_IRQHandler+0x14>)
 800096a:	0018      	movs	r0, r3
 800096c:	f001 f988 	bl	8001c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000028 	.word	0x20000028

0800097c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <TIM3_IRQHandler+0x14>)
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f97c 	bl	8001c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000070 	.word	0x20000070

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <LoopForever+0x6>)
    LDR R1, [R0]
 80009a6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009a8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <LoopForever+0xa>)
    CMP R1, R2
 80009ac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009ae:	d105      	bne.n	80009bc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009b2:	4913      	ldr	r1, [pc, #76]	; (8000a00 <LoopForever+0x12>)
    STR R1, [R0]
 80009b4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009b8:	4913      	ldr	r1, [pc, #76]	; (8000a08 <LoopForever+0x1a>)
    STR R1, [R0]
 80009ba:	6001      	str	r1, [r0, #0]

080009bc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <LoopForever+0x1e>)
  ldr r1, =_edata
 80009be:	4914      	ldr	r1, [pc, #80]	; (8000a10 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <LoopForever+0x26>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009d4:	4c11      	ldr	r4, [pc, #68]	; (8000a1c <LoopForever+0x2e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009e6:	f001 fecb 	bl	8002780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fc19 	bl	8000220 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009f4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009f8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009fc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a00:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a04:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a08:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	08002828 	.word	0x08002828
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	200000c0 	.word	0x200000c0

08000a20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_IRQHandler>
	...

08000a24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_Init+0x24>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_Init+0x24>)
 8000a2e:	2110      	movs	r1, #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f809 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3a:	f7ff fe9b 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a56:	681c      	ldr	r4, [r3, #0]
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_InitTick+0x60>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	23fa      	movs	r3, #250	; 0xfa
 8000a60:	0098      	lsls	r0, r3, #2
 8000a62:	f7ff fb51 	bl	8000108 <__udivsi3>
 8000a66:	0003      	movs	r3, r0
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0020      	movs	r0, r4
 8000a6c:	f7ff fb4c 	bl	8000108 <__udivsi3>
 8000a70:	0003      	movs	r3, r0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f92f 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e00f      	b.n	8000aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d80b      	bhi.n	8000a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f8fc 	bl	8000c8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_InitTick+0x64>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	18d2      	adds	r2, r2, r3
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200000bc 	.word	0x200000bc

08000ad8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	200000bc 	.word	0x200000bc

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff fff0 	bl	8000ad8 <HAL_GetTick>
 8000af8:	0003      	movs	r3, r0
 8000afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	f7ff ffe0 	bl	8000ad8 <HAL_GetTick>
 8000b18:	0002      	movs	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b7f      	cmp	r3, #127	; 0x7f
 8000b46:	d809      	bhi.n	8000b5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	231f      	movs	r3, #31
 8000b50:	401a      	ands	r2, r3
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_EnableIRQ+0x30>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	4091      	lsls	r1, r2
 8000b58:	000a      	movs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
  }
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7c:	d828      	bhi.n	8000bd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <__NVIC_SetPriority+0xd4>)
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	589b      	ldr	r3, [r3, r2]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	481f      	ldr	r0, [pc, #124]	; (8000c3c <__NVIC_SetPriority+0xd4>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	33c0      	adds	r3, #192	; 0xc0
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bce:	e031      	b.n	8000c34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	400b      	ands	r3, r1
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3306      	adds	r3, #6
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	3304      	adds	r3, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	; 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <__NVIC_SetPriority+0xd8>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001c      	movs	r4, r3
 8000c20:	230f      	movs	r3, #15
 8000c22:	4023      	ands	r3, r4
 8000c24:	3b08      	subs	r3, #8
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	3306      	adds	r3, #6
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	18c3      	adds	r3, r0, r3
 8000c30:	3304      	adds	r3, #4
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	045b      	lsls	r3, r3, #17
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d301      	bcc.n	8000c5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e010      	b.n	8000c7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <SysTick_Config+0x44>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	3a01      	subs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	2103      	movs	r1, #3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff ff7c 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x44>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x44>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	210f      	movs	r1, #15
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ff33 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ffaf 	bl	8000c44 <SysTick_Config>
 8000ce6:	0003      	movs	r3, r0
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e14f      	b.n	8000fa0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <HAL_GPIO_Init+0x28>
 8000d16:	e140      	b.n	8000f9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d005      	beq.n	8000d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d130      	bne.n	8000d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d017      	beq.n	8000dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d123      	bne.n	8000e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	58d3      	ldr	r3, [r2, r3]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2207      	movs	r2, #7
 8000dec:	4013      	ands	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2107      	movs	r1, #7
 8000e06:	400b      	ands	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	6939      	ldr	r1, [r7, #16]
 8000e20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	401a      	ands	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	23c0      	movs	r3, #192	; 0xc0
 8000e5c:	029b      	lsls	r3, r3, #10
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d100      	bne.n	8000e64 <HAL_GPIO_Init+0x174>
 8000e62:	e09a      	b.n	8000f9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000e66:	699a      	ldr	r2, [r3, #24]
 8000e68:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	4013      	ands	r3, r2
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e7c:	4a4f      	ldr	r2, [pc, #316]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	589b      	ldr	r3, [r3, r2]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	4013      	ands	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	409a      	lsls	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	2390      	movs	r3, #144	; 0x90
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a44      	ldr	r2, [pc, #272]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_GPIO_Init+0x1de>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a43      	ldr	r2, [pc, #268]	; (8000fc4 <HAL_GPIO_Init+0x2d4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x1da>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a42      	ldr	r2, [pc, #264]	; (8000fc8 <HAL_GPIO_Init+0x2d8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_GPIO_Init+0x1d6>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	400a      	ands	r2, r1
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	029b      	lsls	r3, r3, #10
 8000f34:	4013      	ands	r3, r2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	035b      	lsls	r3, r3, #13
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	039b      	lsls	r3, r3, #14
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	40da      	lsrs	r2, r3
 8000fa8:	1e13      	subs	r3, r2, #0
 8000faa:	d000      	beq.n	8000fae <HAL_GPIO_Init+0x2be>
 8000fac:	e6a8      	b.n	8000d00 <HAL_GPIO_Init+0x10>
  } 
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	0008      	movs	r0, r1
 8000fda:	0011      	movs	r1, r2
 8000fdc:	1cbb      	adds	r3, r7, #2
 8000fde:	1c02      	adds	r2, r0, #0
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	1c7b      	adds	r3, r7, #1
 8000fe4:	1c0a      	adds	r2, r1, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe8:	1c7b      	adds	r3, r7, #1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	881a      	ldrh	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e305      	b.n	800162a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	d100      	bne.n	800102a <HAL_RCC_OscConfig+0x1e>
 8001028:	e08d      	b.n	8001146 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800102a:	4bc5      	ldr	r3, [pc, #788]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	220c      	movs	r2, #12
 8001030:	4013      	ands	r3, r2
 8001032:	2b04      	cmp	r3, #4
 8001034:	d00e      	beq.n	8001054 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001036:	4bc2      	ldr	r3, [pc, #776]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	220c      	movs	r2, #12
 800103c:	4013      	ands	r3, r2
 800103e:	2b08      	cmp	r3, #8
 8001040:	d116      	bne.n	8001070 <HAL_RCC_OscConfig+0x64>
 8001042:	4bbf      	ldr	r3, [pc, #764]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	401a      	ands	r2, r3
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	429a      	cmp	r2, r3
 8001052:	d10d      	bne.n	8001070 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	4bba      	ldr	r3, [pc, #744]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d100      	bne.n	8001062 <HAL_RCC_OscConfig+0x56>
 8001060:	e070      	b.n	8001144 <HAL_RCC_OscConfig+0x138>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <HAL_RCC_OscConfig+0x60>
 800106a:	e06b      	b.n	8001144 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e2dc      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d107      	bne.n	8001088 <HAL_RCC_OscConfig+0x7c>
 8001078:	4bb1      	ldr	r3, [pc, #708]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4bb0      	ldr	r3, [pc, #704]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	0249      	lsls	r1, r1, #9
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e02f      	b.n	80010e8 <HAL_RCC_OscConfig+0xdc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x9e>
 8001090:	4bab      	ldr	r3, [pc, #684]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4baa      	ldr	r3, [pc, #680]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001096:	49ab      	ldr	r1, [pc, #684]	; (8001344 <HAL_RCC_OscConfig+0x338>)
 8001098:	400a      	ands	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	4ba8      	ldr	r3, [pc, #672]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4ba7      	ldr	r3, [pc, #668]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010a2:	49a9      	ldr	r1, [pc, #676]	; (8001348 <HAL_RCC_OscConfig+0x33c>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e01e      	b.n	80010e8 <HAL_RCC_OscConfig+0xdc>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d10e      	bne.n	80010d0 <HAL_RCC_OscConfig+0xc4>
 80010b2:	4ba3      	ldr	r3, [pc, #652]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4ba2      	ldr	r3, [pc, #648]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	02c9      	lsls	r1, r1, #11
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	4b9f      	ldr	r3, [pc, #636]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	0249      	lsls	r1, r1, #9
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xdc>
 80010d0:	4b9b      	ldr	r3, [pc, #620]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b9a      	ldr	r3, [pc, #616]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010d6:	499b      	ldr	r1, [pc, #620]	; (8001344 <HAL_RCC_OscConfig+0x338>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4b98      	ldr	r3, [pc, #608]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b97      	ldr	r3, [pc, #604]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010e2:	4999      	ldr	r1, [pc, #612]	; (8001348 <HAL_RCC_OscConfig+0x33c>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d014      	beq.n	800111a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcf2 	bl	8000ad8 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fa:	f7ff fced 	bl	8000ad8 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b64      	cmp	r3, #100	; 0x64
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e28e      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110c:	4b8c      	ldr	r3, [pc, #560]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0xee>
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fcdd 	bl	8000ad8 <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fcd8 	bl	8000ad8 <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e279      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	4b82      	ldr	r3, [pc, #520]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x118>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d100      	bne.n	8001152 <HAL_RCC_OscConfig+0x146>
 8001150:	e06c      	b.n	800122c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001152:	4b7b      	ldr	r3, [pc, #492]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	220c      	movs	r2, #12
 8001158:	4013      	ands	r3, r2
 800115a:	d00e      	beq.n	800117a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800115c:	4b78      	ldr	r3, [pc, #480]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	220c      	movs	r2, #12
 8001162:	4013      	ands	r3, r2
 8001164:	2b08      	cmp	r3, #8
 8001166:	d11f      	bne.n	80011a8 <HAL_RCC_OscConfig+0x19c>
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	23c0      	movs	r3, #192	; 0xc0
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	401a      	ands	r2, r3
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	429a      	cmp	r2, r3
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	4b71      	ldr	r3, [pc, #452]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2202      	movs	r2, #2
 8001180:	4013      	ands	r3, r2
 8001182:	d005      	beq.n	8001190 <HAL_RCC_OscConfig+0x184>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d001      	beq.n	8001190 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e24c      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	22f8      	movs	r2, #248	; 0xf8
 8001196:	4393      	bics	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00da      	lsls	r2, r3, #3
 80011a0:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	e041      	b.n	800122c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d024      	beq.n	80011fa <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b0:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc8c 	bl	8000ad8 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fc87 	bl	8000ad8 <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e228      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d0f1      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22f8      	movs	r2, #248	; 0xf8
 80011e8:	4393      	bics	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	00da      	lsls	r2, r3, #3
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e018      	b.n	800122c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fa:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001200:	2101      	movs	r1, #1
 8001202:	438a      	bics	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fc67 	bl	8000ad8 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fc62 	bl	8000ad8 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e203      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d1f1      	bne.n	8001210 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2208      	movs	r2, #8
 8001232:	4013      	ands	r3, r2
 8001234:	d036      	beq.n	80012a4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d019      	beq.n	8001272 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001244:	2101      	movs	r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fc45 	bl	8000ad8 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fc40 	bl	8000ad8 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1e1      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d0f1      	beq.n	8001254 <HAL_RCC_OscConfig+0x248>
 8001270:	e018      	b.n	80012a4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fc2b 	bl	8000ad8 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc26 	bl	8000ad8 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1c7      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d1f1      	bne.n	8001288 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2204      	movs	r2, #4
 80012aa:	4013      	ands	r3, r2
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2a4>
 80012ae:	e0b5      	b.n	800141c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	201f      	movs	r0, #31
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	055b      	lsls	r3, r3, #21
 80012c0:	4013      	ands	r3, r2
 80012c2:	d110      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0549      	lsls	r1, r1, #21
 80012ce:	430a      	orrs	r2, r1
 80012d0:	61da      	str	r2, [r3, #28]
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	055b      	lsls	r3, r3, #21
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012e0:	183b      	adds	r3, r7, r0
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_OscConfig+0x340>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d11a      	bne.n	8001328 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_RCC_OscConfig+0x340>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x340>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0049      	lsls	r1, r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001300:	f7ff fbea 	bl	8000ad8 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fbe5 	bl	8000ad8 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e186      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x340>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10f      	bne.n	8001350 <HAL_RCC_OscConfig+0x344>
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	621a      	str	r2, [r3, #32]
 800133c:	e036      	b.n	80013ac <HAL_RCC_OscConfig+0x3a0>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	40021000 	.word	0x40021000
 8001344:	fffeffff 	.word	0xfffeffff
 8001348:	fffbffff 	.word	0xfffbffff
 800134c:	40007000 	.word	0x40007000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x366>
 8001358:	4bb6      	ldr	r3, [pc, #728]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	4bb5      	ldr	r3, [pc, #724]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	621a      	str	r2, [r3, #32]
 8001364:	4bb3      	ldr	r3, [pc, #716]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4bb2      	ldr	r3, [pc, #712]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x3a0>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x388>
 800137a:	4bae      	ldr	r3, [pc, #696]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	4bad      	ldr	r3, [pc, #692]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001380:	2104      	movs	r1, #4
 8001382:	430a      	orrs	r2, r1
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	4bab      	ldr	r3, [pc, #684]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	4baa      	ldr	r3, [pc, #680]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	621a      	str	r2, [r3, #32]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x3a0>
 8001394:	4ba7      	ldr	r3, [pc, #668]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4ba6      	ldr	r3, [pc, #664]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	4ba4      	ldr	r3, [pc, #656]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4ba3      	ldr	r3, [pc, #652]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d014      	beq.n	80013de <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb90 	bl	8000ad8 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb8b 	bl	8000ad8 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a9b      	ldr	r2, [pc, #620]	; (8001638 <HAL_RCC_OscConfig+0x62c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e12b      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	4b98      	ldr	r3, [pc, #608]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x3b2>
 80013dc:	e013      	b.n	8001406 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb7b 	bl	8000ad8 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb76 	bl	8000ad8 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a91      	ldr	r2, [pc, #580]	; (8001638 <HAL_RCC_OscConfig+0x62c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e116      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	231f      	movs	r3, #31
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001416:	4989      	ldr	r1, [pc, #548]	; (800163c <HAL_RCC_OscConfig+0x630>)
 8001418:	400a      	ands	r2, r1
 800141a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12a      	bne.n	8001484 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142e:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	4b80      	ldr	r3, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001434:	2104      	movs	r1, #4
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800143a:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800143c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143e:	4b7d      	ldr	r3, [pc, #500]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb47 	bl	8000ad8 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001450:	f7ff fb42 	bl	8000ad8 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0e3      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001462:	4b74      	ldr	r3, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d0f1      	beq.n	8001450 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b71      	ldr	r3, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e034      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	3305      	adds	r3, #5
 800148a:	d111      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001492:	2104      	movs	r1, #4
 8001494:	438a      	bics	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	22f8      	movs	r2, #248	; 0xf8
 800149e:	4393      	bics	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e01e      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014b0:	4b60      	ldr	r3, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	430a      	orrs	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014bc:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fb06 	bl	8000ad8 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014d2:	f7ff fb01 	bl	8000ad8 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0a2      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f1      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
 80014f6:	e097      	b.n	8001628 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	220c      	movs	r2, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x4fa>
 8001504:	e06b      	b.n	80015de <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d14c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001514:	494a      	ldr	r1, [pc, #296]	; (8001640 <HAL_RCC_OscConfig+0x634>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fadd 	bl	8000ad8 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7ff fad8 	bl	8000ad8 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e079      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	220f      	movs	r2, #15
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x638>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	431a      	orrs	r2, r3
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	0449      	lsls	r1, r1, #17
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff faab 	bl	8000ad8 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff faa6 	bl	8000ad8 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e047      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	049b      	lsls	r3, r3, #18
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x57c>
 80015a6:	e03f      	b.n	8001628 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80015ae:	4924      	ldr	r1, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x634>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fa90 	bl	8000ad8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fa8b 	bl	8000ad8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e02c      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	049b      	lsls	r3, r3, #18
 80015d8:	4013      	ands	r3, r2
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x5b2>
 80015dc:	e024      	b.n	8001628 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e01f      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x628>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	23c0      	movs	r3, #192	; 0xc0
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	429a      	cmp	r2, r3
 8001604:	d10e      	bne.n	8001624 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	220f      	movs	r2, #15
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	23f0      	movs	r3, #240	; 0xf0
 8001618:	039b      	lsls	r3, r3, #14
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b008      	add	sp, #32
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40021000 	.word	0x40021000
 8001638:	00001388 	.word	0x00001388
 800163c:	efffffff 	.word	0xefffffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	ffc27fff 	.word	0xffc27fff

08001648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b3      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d911      	bls.n	800168e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e09a      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d015      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2204      	movs	r2, #4
 800169e:	4013      	ands	r3, r2
 80016a0:	d006      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	21e0      	movs	r1, #224	; 0xe0
 80016aa:	00c9      	lsls	r1, r1, #3
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	22f0      	movs	r2, #240	; 0xf0
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d114      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e06e      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	4013      	ands	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e062      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e05b      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff f9da 	bl	8000ad8 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001728:	e009      	b.n	800173e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7ff f9d5 	bl	8000ad8 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_RCC_ClockConfig+0x18c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e042      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	220c      	movs	r2, #12
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1ec      	bne.n	800172a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d211      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e020      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_RCC_ClockConfig+0x190>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017a0:	f000 f820 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a4:	0001      	movs	r1, r0
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	220f      	movs	r2, #15
 80017ae:	4013      	ands	r3, r2
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x194>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	000a      	movs	r2, r1
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x198>)
 80017ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017bc:	2003      	movs	r0, #3
 80017be:	f7ff f945 	bl	8000a4c <HAL_InitTick>
  
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	fffff8ff 	.word	0xfffff8ff
 80017dc:	08002810 	.word	0x08002810
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08f      	sub	sp, #60	; 0x3c
 80017e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017ea:	2314      	movs	r3, #20
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	4a2c      	ldr	r2, [pc, #176]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017f2:	c313      	stmia	r3!, {r0, r1, r4}
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	2b04      	cmp	r3, #4
 8001826:	d002      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x4a>
 8001828:	2b08      	cmp	r3, #8
 800182a:	d003      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x50>
 800182c:	e02f      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001832:	e02f      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	0c9b      	lsrs	r3, r3, #18
 8001838:	220f      	movs	r2, #15
 800183a:	4013      	ands	r3, r2
 800183c:	2214      	movs	r2, #20
 800183e:	18ba      	adds	r2, r7, r2
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	220f      	movs	r2, #15
 800184a:	4013      	ands	r3, r2
 800184c:	1d3a      	adds	r2, r7, #4
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001854:	23c0      	movs	r3, #192	; 0xc0
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	401a      	ands	r2, r3
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	429a      	cmp	r2, r3
 8001860:	d109      	bne.n	8001876 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001866:	f7fe fc4f 	bl	8000108 <__udivsi3>
 800186a:	0003      	movs	r3, r0
 800186c:	001a      	movs	r2, r3
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	4353      	muls	r3, r2
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
 8001874:	e008      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800187a:	f7fe fc45 	bl	8000108 <__udivsi3>
 800187e:	0003      	movs	r3, r0
 8001880:	001a      	movs	r2, r3
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	4353      	muls	r3, r2
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800188c:	e002      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001892:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b00f      	add	sp, #60	; 0x3c
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	080027f0 	.word	0x080027f0
 80018a4:	08002800 	.word	0x08002800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	007a1200 	.word	0x007a1200

080018b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e042      	b.n	8001948 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	223d      	movs	r2, #61	; 0x3d
 80018c6:	5c9b      	ldrb	r3, [r3, r2]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d107      	bne.n	80018de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	223c      	movs	r2, #60	; 0x3c
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7fe ffcd 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	223d      	movs	r2, #61	; 0x3d
 80018e2:	2102      	movs	r1, #2
 80018e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	0019      	movs	r1, r3
 80018f0:	0010      	movs	r0, r2
 80018f2:	f000 fc9f 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2246      	movs	r2, #70	; 0x46
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	223e      	movs	r2, #62	; 0x3e
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	223f      	movs	r2, #63	; 0x3f
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2241      	movs	r2, #65	; 0x41
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2242      	movs	r2, #66	; 0x42
 8001922:	2101      	movs	r1, #1
 8001924:	5499      	strb	r1, [r3, r2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2243      	movs	r2, #67	; 0x43
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2244      	movs	r2, #68	; 0x44
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2245      	movs	r2, #69	; 0x45
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	223d      	movs	r2, #61	; 0x3d
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	223d      	movs	r2, #61	; 0x3d
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d001      	beq.n	8001968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e030      	b.n	80019ca <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	223d      	movs	r2, #61	; 0x3d
 800196c:	2102      	movs	r1, #2
 800196e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_TIM_Base_Start_IT+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d004      	beq.n	8001994 <HAL_TIM_Base_Start_IT+0x44>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_TIM_Base_Start_IT+0x88>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d111      	bne.n	80019b8 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2207      	movs	r2, #7
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d010      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b6:	e007      	b.n	80019c8 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2101      	movs	r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b004      	add	sp, #16
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40000400 	.word	0x40000400

080019dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e042      	b.n	8001a74 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	223d      	movs	r2, #61	; 0x3d
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223c      	movs	r2, #60	; 0x3c
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fed9 	bl	80007bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	223d      	movs	r2, #61	; 0x3d
 8001a0e:	2102      	movs	r1, #2
 8001a10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	f000 fc09 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2246      	movs	r2, #70	; 0x46
 8001a26:	2101      	movs	r1, #1
 8001a28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223e      	movs	r2, #62	; 0x3e
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	223f      	movs	r2, #63	; 0x3f
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2240      	movs	r2, #64	; 0x40
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2241      	movs	r2, #65	; 0x41
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2242      	movs	r2, #66	; 0x42
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2243      	movs	r2, #67	; 0x43
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2244      	movs	r2, #68	; 0x44
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2245      	movs	r2, #69	; 0x45
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223d      	movs	r2, #61	; 0x3d
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	230f      	movs	r3, #15
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <HAL_TIM_IC_Start_IT+0x22>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	223e      	movs	r2, #62	; 0x3e
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	e013      	b.n	8001ac6 <HAL_TIM_IC_Start_IT+0x4a>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d104      	bne.n	8001aae <HAL_TIM_IC_Start_IT+0x32>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	223f      	movs	r2, #63	; 0x3f
 8001aa8:	5c9b      	ldrb	r3, [r3, r2]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	e00b      	b.n	8001ac6 <HAL_TIM_IC_Start_IT+0x4a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d104      	bne.n	8001abe <HAL_TIM_IC_Start_IT+0x42>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	e003      	b.n	8001ac6 <HAL_TIM_IC_Start_IT+0x4a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2241      	movs	r2, #65	; 0x41
 8001ac2:	5c9b      	ldrb	r3, [r3, r2]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	220e      	movs	r2, #14
 8001ac8:	18ba      	adds	r2, r7, r2
 8001aca:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d104      	bne.n	8001adc <HAL_TIM_IC_Start_IT+0x60>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2242      	movs	r2, #66	; 0x42
 8001ad6:	5c9b      	ldrb	r3, [r3, r2]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e013      	b.n	8001b04 <HAL_TIM_IC_Start_IT+0x88>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d104      	bne.n	8001aec <HAL_TIM_IC_Start_IT+0x70>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2243      	movs	r2, #67	; 0x43
 8001ae6:	5c9b      	ldrb	r3, [r3, r2]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e00b      	b.n	8001b04 <HAL_TIM_IC_Start_IT+0x88>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d104      	bne.n	8001afc <HAL_TIM_IC_Start_IT+0x80>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2244      	movs	r2, #68	; 0x44
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e003      	b.n	8001b04 <HAL_TIM_IC_Start_IT+0x88>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2245      	movs	r2, #69	; 0x45
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	210d      	movs	r1, #13
 8001b06:	187a      	adds	r2, r7, r1
 8001b08:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b0a:	230e      	movs	r3, #14
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d103      	bne.n	8001b1c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0a6      	b.n	8001c6e <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_TIM_IC_Start_IT+0xb4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	223e      	movs	r2, #62	; 0x3e
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	5499      	strb	r1, [r3, r2]
 8001b2e:	e013      	b.n	8001b58 <HAL_TIM_IC_Start_IT+0xdc>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d104      	bne.n	8001b40 <HAL_TIM_IC_Start_IT+0xc4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223f      	movs	r2, #63	; 0x3f
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	e00b      	b.n	8001b58 <HAL_TIM_IC_Start_IT+0xdc>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d104      	bne.n	8001b50 <HAL_TIM_IC_Start_IT+0xd4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	e003      	b.n	8001b58 <HAL_TIM_IC_Start_IT+0xdc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2241      	movs	r2, #65	; 0x41
 8001b54:	2102      	movs	r1, #2
 8001b56:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <HAL_TIM_IC_Start_IT+0xec>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2242      	movs	r2, #66	; 0x42
 8001b62:	2102      	movs	r1, #2
 8001b64:	5499      	strb	r1, [r3, r2]
 8001b66:	e013      	b.n	8001b90 <HAL_TIM_IC_Start_IT+0x114>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d104      	bne.n	8001b78 <HAL_TIM_IC_Start_IT+0xfc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2243      	movs	r2, #67	; 0x43
 8001b72:	2102      	movs	r1, #2
 8001b74:	5499      	strb	r1, [r3, r2]
 8001b76:	e00b      	b.n	8001b90 <HAL_TIM_IC_Start_IT+0x114>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d104      	bne.n	8001b88 <HAL_TIM_IC_Start_IT+0x10c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2244      	movs	r2, #68	; 0x44
 8001b82:	2102      	movs	r1, #2
 8001b84:	5499      	strb	r1, [r3, r2]
 8001b86:	e003      	b.n	8001b90 <HAL_TIM_IC_Start_IT+0x114>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2245      	movs	r2, #69	; 0x45
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d02a      	beq.n	8001bec <HAL_TIM_IC_Start_IT+0x170>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d830      	bhi.n	8001bfe <HAL_TIM_IC_Start_IT+0x182>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d01b      	beq.n	8001bda <HAL_TIM_IC_Start_IT+0x15e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d82a      	bhi.n	8001bfe <HAL_TIM_IC_Start_IT+0x182>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IC_Start_IT+0x13a>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d009      	beq.n	8001bc8 <HAL_TIM_IC_Start_IT+0x14c>
 8001bb4:	e023      	b.n	8001bfe <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]
      break;
 8001bc6:	e01f      	b.n	8001c08 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]
      break;
 8001bd8:	e016      	b.n	8001c08 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2108      	movs	r1, #8
 8001be6:	430a      	orrs	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]
      break;
 8001bea:	e00d      	b.n	8001c08 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
      break;
 8001bfc:	e004      	b.n	8001c08 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8001bfe:	230f      	movs	r3, #15
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      break;
 8001c06:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001c08:	230f      	movs	r3, #15
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12a      	bne.n	8001c68 <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 fd2a 	bl	8002674 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_TIM_IC_Start_IT+0x1fc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_TIM_IC_Start_IT+0x1b8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_TIM_IC_Start_IT+0x200>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d010      	beq.n	8001c68 <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c56:	e007      	b.n	8001c68 <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2101      	movs	r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001c68:	230f      	movs	r3, #15
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40000400 	.word	0x40000400

08001c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d124      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d11d      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4252      	negs	r2, r2
 8001cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fcd8 	bl	8000678 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e007      	b.n	8001cda <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fa99 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fa9d 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d125      	bne.n	8001d3a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d11e      	bne.n	8001d3a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2205      	movs	r2, #5
 8001d02:	4252      	negs	r2, r2
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7fe fcab 	bl	8000678 <HAL_TIM_IC_CaptureCallback>
 8001d22:	e007      	b.n	8001d34 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 fa6c 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 fa70 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2208      	movs	r2, #8
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d124      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2208      	movs	r2, #8
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11d      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2209      	movs	r2, #9
 8001d5c:	4252      	negs	r2, r2
 8001d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2204      	movs	r2, #4
 8001d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7fe fc7f 	bl	8000678 <HAL_TIM_IC_CaptureCallback>
 8001d7a:	e007      	b.n	8001d8c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 fa40 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 fa44 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d125      	bne.n	8001dec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2210      	movs	r2, #16
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d11e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2211      	movs	r2, #17
 8001db4:	4252      	negs	r2, r2
 8001db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe fc52 	bl	8000678 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e007      	b.n	8001de6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 fa13 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 fa17 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10f      	bne.n	8001e1a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d108      	bne.n	8001e1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	4252      	negs	r2, r2
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe fc37 	bl	8000688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d10f      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b80      	cmp	r3, #128	; 0x80
 8001e34:	d108      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2281      	movs	r2, #129	; 0x81
 8001e3c:	4252      	negs	r2, r2
 8001e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 fc94 	bl	8002770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b40      	cmp	r3, #64	; 0x40
 8001e54:	d10f      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d108      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2241      	movs	r2, #65	; 0x41
 8001e6a:	4252      	negs	r2, r2
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 f9d7 	bl	8002224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d10f      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d108      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2221      	movs	r2, #33	; 0x21
 8001e98:	4252      	negs	r2, r2
 8001e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 fc5e 	bl	8002760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb8:	2317      	movs	r3, #23
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	223c      	movs	r2, #60	; 0x3c
 8001ec4:	5c9b      	ldrb	r3, [r3, r2]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_IC_ConfigChannel+0x22>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e08c      	b.n	8001fe8 <HAL_TIM_IC_ConfigChannel+0x13c>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	223c      	movs	r2, #60	; 0x3c
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f000 fa0e 	bl	800230c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	210c      	movs	r1, #12
 8001efc:	438a      	bics	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6999      	ldr	r1, [r3, #24]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	619a      	str	r2, [r3, #24]
 8001f12:	e062      	b.n	8001fda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d11c      	bne.n	8001f54 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f000 fa6f 	bl	800240c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	492d      	ldr	r1, [pc, #180]	; (8001ff0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6999      	ldr	r1, [r3, #24]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	021a      	lsls	r2, r3, #8
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	e042      	b.n	8001fda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11b      	bne.n	8001f92 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f000 fac3 	bl	80024f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	210c      	movs	r1, #12
 8001f7a:	438a      	bics	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69d9      	ldr	r1, [r3, #28]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
 8001f90:	e023      	b.n	8001fda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	d11c      	bne.n	8001fd2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f000 fae4 	bl	8002574 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69d9      	ldr	r1, [r3, #28]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	021a      	lsls	r2, r3, #8
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
 8001fd0:	e003      	b.n	8001fda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	223c      	movs	r2, #60	; 0x3c
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

  return status;
 8001fe2:	2317      	movs	r3, #23
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b006      	add	sp, #24
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fffff3ff 	.word	0xfffff3ff

08001ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	230f      	movs	r3, #15
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223c      	movs	r2, #60	; 0x3c
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x20>
 8002010:	2302      	movs	r3, #2
 8002012:	e0bc      	b.n	800218e <HAL_TIM_ConfigClockSource+0x19a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223c      	movs	r2, #60	; 0x3c
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	223d      	movs	r2, #61	; 0x3d
 8002020:	2102      	movs	r1, #2
 8002022:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2277      	movs	r2, #119	; 0x77
 8002030:	4393      	bics	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	0192      	lsls	r2, r2, #6
 800204c:	4293      	cmp	r3, r2
 800204e:	d040      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xde>
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	0192      	lsls	r2, r2, #6
 8002054:	4293      	cmp	r3, r2
 8002056:	d900      	bls.n	800205a <HAL_TIM_ConfigClockSource+0x66>
 8002058:	e088      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	0152      	lsls	r2, r2, #5
 800205e:	4293      	cmp	r3, r2
 8002060:	d100      	bne.n	8002064 <HAL_TIM_ConfigClockSource+0x70>
 8002062:	e088      	b.n	8002176 <HAL_TIM_ConfigClockSource+0x182>
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0152      	lsls	r2, r2, #5
 8002068:	4293      	cmp	r3, r2
 800206a:	d900      	bls.n	800206e <HAL_TIM_ConfigClockSource+0x7a>
 800206c:	e07e      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 800206e:	2b70      	cmp	r3, #112	; 0x70
 8002070:	d018      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0xb0>
 8002072:	d900      	bls.n	8002076 <HAL_TIM_ConfigClockSource+0x82>
 8002074:	e07a      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 8002076:	2b60      	cmp	r3, #96	; 0x60
 8002078:	d04f      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x126>
 800207a:	d900      	bls.n	800207e <HAL_TIM_ConfigClockSource+0x8a>
 800207c:	e076      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 800207e:	2b50      	cmp	r3, #80	; 0x50
 8002080:	d03b      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x106>
 8002082:	d900      	bls.n	8002086 <HAL_TIM_ConfigClockSource+0x92>
 8002084:	e072      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d057      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x146>
 800208a:	d900      	bls.n	800208e <HAL_TIM_ConfigClockSource+0x9a>
 800208c:	e06e      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 800208e:	2b30      	cmp	r3, #48	; 0x30
 8002090:	d063      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x166>
 8002092:	d86b      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 8002094:	2b20      	cmp	r3, #32
 8002096:	d060      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x166>
 8002098:	d868      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x178>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05d      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x166>
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d05b      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x166>
 80020a2:	e063      	b.n	800216c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f000 fabe 	bl	8002634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2277      	movs	r2, #119	; 0x77
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
      break;
 80020d0:	e052      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f000 faa7 	bl	8002634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	01c9      	lsls	r1, r1, #7
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
      break;
 80020f8:	e03e      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	001a      	movs	r2, r3
 8002108:	f000 f952 	bl	80023b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2150      	movs	r1, #80	; 0x50
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fa74 	bl	8002600 <TIM_ITRx_SetConfig>
      break;
 8002118:	e02e      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	001a      	movs	r2, r3
 8002128:	f000 f9b2 	bl	8002490 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2160      	movs	r1, #96	; 0x60
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fa64 	bl	8002600 <TIM_ITRx_SetConfig>
      break;
 8002138:	e01e      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	001a      	movs	r2, r3
 8002148:	f000 f932 	bl	80023b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2140      	movs	r1, #64	; 0x40
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fa54 	bl	8002600 <TIM_ITRx_SetConfig>
      break;
 8002158:	e00e      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0019      	movs	r1, r3
 8002164:	0010      	movs	r0, r2
 8002166:	f000 fa4b 	bl	8002600 <TIM_ITRx_SetConfig>
      break;
 800216a:	e005      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
      break;
 8002174:	e000      	b.n	8002178 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002176:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	223d      	movs	r2, #61	; 0x3d
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	223c      	movs	r2, #60	; 0x3c
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

  return status;
 8002188:	230f      	movs	r3, #15
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	781b      	ldrb	r3, [r3, #0]
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	ffff00ff 	.word	0xffff00ff

0800219c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d01e      	beq.n	80021ee <HAL_TIM_ReadCapturedValue+0x52>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d820      	bhi.n	80021f8 <HAL_TIM_ReadCapturedValue+0x5c>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d013      	beq.n	80021e4 <HAL_TIM_ReadCapturedValue+0x48>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d81a      	bhi.n	80021f8 <HAL_TIM_ReadCapturedValue+0x5c>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_TIM_ReadCapturedValue+0x34>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d005      	beq.n	80021da <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80021ce:	e013      	b.n	80021f8 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	60fb      	str	r3, [r7, #12]
      break;
 80021d8:	e00f      	b.n	80021fa <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	60fb      	str	r3, [r7, #12]
      break;
 80021e2:	e00a      	b.n	80021fa <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	60fb      	str	r3, [r7, #12]
      break;
 80021ec:	e005      	b.n	80021fa <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	60fb      	str	r3, [r7, #12]
      break;
 80021f6:	e000      	b.n	80021fa <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80021f8:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a2b      	ldr	r2, [pc, #172]	; (80022f4 <TIM_Base_SetConfig+0xc0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x20>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <TIM_Base_SetConfig+0xc4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2270      	movs	r2, #112	; 0x70
 8002258:	4393      	bics	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <TIM_Base_SetConfig+0xc0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00f      	beq.n	800228e <TIM_Base_SetConfig+0x5a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <TIM_Base_SetConfig+0xc4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00b      	beq.n	800228e <TIM_Base_SetConfig+0x5a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <TIM_Base_SetConfig+0xc8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_Base_SetConfig+0x5a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <TIM_Base_SetConfig+0xcc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_Base_SetConfig+0x5a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <TIM_Base_SetConfig+0xd0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <TIM_Base_SetConfig+0xd4>)
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	4393      	bics	r3, r2
 80022a6:	001a      	movs	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <TIM_Base_SetConfig+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <TIM_Base_SetConfig+0xaa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <TIM_Base_SetConfig+0xcc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <TIM_Base_SetConfig+0xaa>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <TIM_Base_SetConfig+0xd0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d103      	bne.n	80022e6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	615a      	str	r2, [r3, #20]
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40002000 	.word	0x40002000
 8002300:	40014400 	.word	0x40014400
 8002304:	40014800 	.word	0x40014800
 8002308:	fffffcff 	.word	0xfffffcff

0800230c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	2201      	movs	r2, #1
 8002320:	4393      	bics	r3, r2
 8002322:	001a      	movs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <TIM_TI1_SetConfig+0x9c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <TIM_TI1_SetConfig+0x38>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <TIM_TI1_SetConfig+0xa0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <TIM_TI1_SetConfig+0x3c>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <TIM_TI1_SetConfig+0x3e>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2203      	movs	r2, #3
 8002352:	4393      	bics	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e003      	b.n	8002368 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2201      	movs	r2, #1
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	22f0      	movs	r2, #240	; 0xf0
 800236c:	4393      	bics	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	4013      	ands	r3, r2
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	220a      	movs	r2, #10
 8002382:	4393      	bics	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	220a      	movs	r2, #10
 800238a:	4013      	ands	r3, r2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	621a      	str	r2, [r3, #32]
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b006      	add	sp, #24
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400

080023b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4393      	bics	r3, r2
 80023ca:	001a      	movs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	22f0      	movs	r2, #240	; 0xf0
 80023da:	4393      	bics	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	220a      	movs	r2, #10
 80023ec:	4393      	bics	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b006      	add	sp, #24
 800240a:	bd80      	pop	{r7, pc}

0800240c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	2210      	movs	r2, #16
 8002420:	4393      	bics	r3, r2
 8002422:	001a      	movs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <TIM_TI2_SetConfig+0x7c>)
 8002438:	4013      	ands	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <TIM_TI2_SetConfig+0x80>)
 800244a:	4013      	ands	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	031b      	lsls	r3, r3, #12
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	22a0      	movs	r2, #160	; 0xa0
 8002460:	4393      	bics	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	22a0      	movs	r2, #160	; 0xa0
 800246a:	4013      	ands	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	621a      	str	r2, [r3, #32]
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b006      	add	sp, #24
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffffcff 	.word	0xfffffcff
 800248c:	ffff0fff 	.word	0xffff0fff

08002490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	2210      	movs	r2, #16
 80024a2:	4393      	bics	r3, r2
 80024a4:	001a      	movs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <TIM_TI2_ConfigInputStage+0x60>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	031b      	lsls	r3, r3, #12
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	22a0      	movs	r2, #160	; 0xa0
 80024cc:	4393      	bics	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b006      	add	sp, #24
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	ffff0fff 	.word	0xffff0fff

080024f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <TIM_TI3_SetConfig+0x78>)
 8002508:	401a      	ands	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2203      	movs	r2, #3
 800251e:	4393      	bics	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	4393      	bics	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	22ff      	movs	r2, #255	; 0xff
 8002538:	4013      	ands	r3, r2
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <TIM_TI3_SetConfig+0x7c>)
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	021a      	lsls	r2, r3, #8
 800254c:	23a0      	movs	r3, #160	; 0xa0
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	4013      	ands	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffffeff 	.word	0xfffffeff
 8002570:	fffff5ff 	.word	0xfffff5ff

08002574 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <TIM_TI4_SetConfig+0x7c>)
 8002588:	401a      	ands	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <TIM_TI4_SetConfig+0x80>)
 800259e:	4013      	ands	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <TIM_TI4_SetConfig+0x84>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	031b      	lsls	r3, r3, #12
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <TIM_TI4_SetConfig+0x88>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	031a      	lsls	r2, r3, #12
 80025ce:	23a0      	movs	r3, #160	; 0xa0
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	4013      	ands	r3, r2
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b006      	add	sp, #24
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	ffffefff 	.word	0xffffefff
 80025f4:	fffffcff 	.word	0xfffffcff
 80025f8:	ffff0fff 	.word	0xffff0fff
 80025fc:	ffff5fff 	.word	0xffff5fff

08002600 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2270      	movs	r2, #112	; 0x70
 8002614:	4393      	bics	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	2207      	movs	r2, #7
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <TIM_ETR_SetConfig+0x3c>)
 800264c:	4013      	ands	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	021a      	lsls	r2, r3, #8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	431a      	orrs	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b006      	add	sp, #24
 800266e:	bd80      	pop	{r7, pc}
 8002670:	ffff00ff 	.word	0xffff00ff

08002674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	221f      	movs	r2, #31
 8002684:	4013      	ands	r3, r2
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	0013      	movs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	43d2      	mvns	r2, r2
 8002696:	401a      	ands	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	211f      	movs	r1, #31
 80026a4:	400b      	ands	r3, r1
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4099      	lsls	r1, r3
 80026aa:	000b      	movs	r3, r1
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b006      	add	sp, #24
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	223c      	movs	r2, #60	; 0x3c
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e03c      	b.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	223c      	movs	r2, #60	; 0x3c
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	223d      	movs	r2, #61	; 0x3d
 80026e0:	2102      	movs	r1, #2
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2270      	movs	r2, #112	; 0x70
 80026f8:	4393      	bics	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10c      	bne.n	800273c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	4393      	bics	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4313      	orrs	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	223d      	movs	r2, #61	; 0x3d
 8002740:	2101      	movs	r1, #1
 8002742:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223c      	movs	r2, #60	; 0x3c
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40000400 	.word	0x40000400

08002760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <__libc_init_array>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	2600      	movs	r6, #0
 8002784:	4d0c      	ldr	r5, [pc, #48]	; (80027b8 <__libc_init_array+0x38>)
 8002786:	4c0d      	ldr	r4, [pc, #52]	; (80027bc <__libc_init_array+0x3c>)
 8002788:	1b64      	subs	r4, r4, r5
 800278a:	10a4      	asrs	r4, r4, #2
 800278c:	42a6      	cmp	r6, r4
 800278e:	d109      	bne.n	80027a4 <__libc_init_array+0x24>
 8002790:	2600      	movs	r6, #0
 8002792:	f000 f821 	bl	80027d8 <_init>
 8002796:	4d0a      	ldr	r5, [pc, #40]	; (80027c0 <__libc_init_array+0x40>)
 8002798:	4c0a      	ldr	r4, [pc, #40]	; (80027c4 <__libc_init_array+0x44>)
 800279a:	1b64      	subs	r4, r4, r5
 800279c:	10a4      	asrs	r4, r4, #2
 800279e:	42a6      	cmp	r6, r4
 80027a0:	d105      	bne.n	80027ae <__libc_init_array+0x2e>
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	00b3      	lsls	r3, r6, #2
 80027a6:	58eb      	ldr	r3, [r5, r3]
 80027a8:	4798      	blx	r3
 80027aa:	3601      	adds	r6, #1
 80027ac:	e7ee      	b.n	800278c <__libc_init_array+0xc>
 80027ae:	00b3      	lsls	r3, r6, #2
 80027b0:	58eb      	ldr	r3, [r5, r3]
 80027b2:	4798      	blx	r3
 80027b4:	3601      	adds	r6, #1
 80027b6:	e7f2      	b.n	800279e <__libc_init_array+0x1e>
 80027b8:	08002820 	.word	0x08002820
 80027bc:	08002820 	.word	0x08002820
 80027c0:	08002820 	.word	0x08002820
 80027c4:	08002824 	.word	0x08002824

080027c8 <memset>:
 80027c8:	0003      	movs	r3, r0
 80027ca:	1882      	adds	r2, r0, r2
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d100      	bne.n	80027d2 <memset+0xa>
 80027d0:	4770      	bx	lr
 80027d2:	7019      	strb	r1, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	e7f9      	b.n	80027cc <memset+0x4>

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
